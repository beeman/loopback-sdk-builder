/* tslint:disable */
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/startWith';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/toArray';
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import { concat } from 'rxjs/observable/concat';
import { Injectable, Inject } from '@angular/core';
import { Effect, Actions } from '@ngrx/effects';

import { LoopbackAction } from '../models/BaseModels';
import { BaseLoopbackEffects } from './base';

import { <%- modelName %>ActionTypes, <%- modelName %>Actions } from '../actions/<%- modelName %>';
import { LoopbackErrorActions } from '../actions/error';
import { <%- modelName %>Api } from '../services/index';

@Injectable()
export class <%- modelName %>Effects extends BaseLoopbackEffects {
  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * OAuthClientApplications relation effects
   */
  @Effect()
  protected findByIdOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.FIND_BY_ID_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.findByIdOAuthClientApplications(action.payload.id, action.payload.fk)
        .map((response) => new <%- modelName %>Actions.findByIdOAuthClientApplicationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.findByIdOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected destroyByIdOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.DESTROY_BY_ID_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.destroyByIdOAuthClientApplications(action.payload.id, action.payload.fk)
        .map(() => new <%- modelName %>Actions.destroyByIdOAuthClientApplicationsSuccess(action.payload, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.destroyByIdOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected updateByIdOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.UPDATE_BY_ID_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.updateByIdOAuthClientApplications(action.payload.id, action.payload.fk, action.payload.data)
        .map((response) => new <%- modelName %>Actions.updateByIdOAuthClientApplicationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.updateByIdOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected createOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.CREATE_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.createOAuthClientApplications(action.payload.id, action.payload.data)
        .map((response) => new <%- modelName %>Actions.createOAuthClientApplicationsSuccess(action.payload.id,response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.createOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected deleteOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.DELETE_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.deleteOAuthClientApplications(action.payload.id)
        .map(() => new <%- modelName %>Actions.deleteOAuthClientApplicationsSuccess(action.payload.id, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.deleteOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected createManyOAuthClientApplications: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.CREATE_MANY_OAUTHCLIENTAPPLICATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.createManyOAuthClientApplications(action.payload.id, action.payload.data)
        .map((response) => new <%- modelName %>Actions.createManyOAuthClientApplicationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.createManyOAuthClientApplicationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * Organizations relation effects
   */
  @Effect()
  protected findByIdOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.FIND_BY_ID_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.findByIdOrganizations(action.payload.id, action.payload.fk)
        .map((response) => new <%- modelName %>Actions.findByIdOrganizationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.findByIdOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected destroyByIdOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.DESTROY_BY_ID_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.destroyByIdOrganizations(action.payload.id, action.payload.fk)
        .map(() => new <%- modelName %>Actions.destroyByIdOrganizationsSuccess(action.payload, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.destroyByIdOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected updateByIdOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.UPDATE_BY_ID_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.updateByIdOrganizations(action.payload.id, action.payload.fk, action.payload.data)
        .map((response) => new <%- modelName %>Actions.updateByIdOrganizationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.updateByIdOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected createOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.CREATE_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.createOrganizations(action.payload.id, action.payload.data)
        .map((response) => new <%- modelName %>Actions.createOrganizationsSuccess(action.payload.id,response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.createOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected deleteOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.DELETE_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.deleteOrganizations(action.payload.id)
        .map(() => new <%- modelName %>Actions.deleteOrganizationsSuccess(action.payload.id, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.deleteOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected createManyOrganizations: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.CREATE_MANY_ORGANIZATIONS)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.createManyOrganizations(action.payload.id, action.payload.data)
        .map((response) => new <%- modelName %>Actions.createManyOrganizationsSuccess(action.payload.id, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.createManyOrganizationsFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );
  
  <% if (model.isUser) { -%>
  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * <%- modelName %> specific actions
   */
  @Effect()
  protected login: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.LOGIN)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.login(action.payload.credentials, action.payload.include, action.payload.rememberMe)
        .map((response) => new <%- modelName %>Actions.loginSuccess(response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.loginFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected signup: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.SIGNUP)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.create(action.payload)
        .map((response) => new <%- modelName %>Actions.signupSuccess(action.payload, response, action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.signupFail(error, action.meta)),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );

  @Effect()
  protected logout: Observable<LoopbackAction> = this.actions$
    .ofType(<%- modelName %>ActionTypes.LOGOUT)
    .mergeMap((action: LoopbackAction) =>
      this.<%- modelName.toLowerCase() %>.logout()
        .map(() => new <%- modelName %>Actions.logoutSuccess(action.meta))
        .catch((error) => concat(
          of(new <%- modelName %>Actions.logoutFail()),
          of(new LoopbackErrorActions.error(error, action.meta))
        ))
    );
    
  <% } -%>
  /**
   * @author João Ribeiro <@JonnyBGod> <github:JonnyBGod>
   * @description
   * Decorate base effects metadata
   */
  @Effect() protected create;
  @Effect() protected createMany;
  @Effect() protected findById;
  @Effect() protected find;
  @Effect() protected findOne;
  @Effect() protected updateAll;
  @Effect() protected deleteById;
  @Effect() protected updateAttributes;
  @Effect() protected upsert;
  @Effect() protected upsertWithWhere;
  @Effect() protected replaceOrCreate;
  @Effect() protected replaceById;
  @Effect() protected patchOrCreate;
  @Effect() protected patchAttributes;

  constructor(
    @Inject(Actions) public actions$: Actions,
    @Inject(<%- modelName %>Api) public <%- modelName.toLowerCase() %>: <%- modelName %>Api
  ) {
    super(actions$, <%- modelName.toLowerCase() %>, '<%- modelName %>', <%- modelName %>ActionTypes, <%- modelName %>Actions);
  }
}
